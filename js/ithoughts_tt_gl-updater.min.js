/*! ithoughts-tooltip-glossary build on 2017-04-24 01:07:53 for v2.7.1 */
/**
 * @file Handles the dialog logic between server updates operations and client
 *
 * @author Gerkin
 * @copyright 2016 GerkinDevelopment
 * @license https://www.gnu.org/licenses/gpl-3.0.html GPLv3
 * @package ithoughts-tooltip-glossary
 *
 * @version 2.7.0
 */
iThoughtsTooltipGlossary=iThoughtsTooltipGlossary||{}, function( a ) {
	'use strict';function b( a ) {
		h.post( iThoughtsTooltipGlossary.admin_ajax, {
			action: 'ithoughts_tt_gl_update',
			data:   {
				versions:       j,
				progression:    a,
				maxAdvandement: f.max,
			},
		}, function( a ) {
			g.parentElement.scrollTop>g.parentElement.scrollHeight-g.parentElement.clientHeight-50&&( g.parentElement.scrollTop=g.parentElement.scrollHeight );var i=g.parentElement.scrollHeight-g.parentElement.clientHeight;if ( d.value=a.data.progression, e.innerHTML=d.value+'/'+f.max+' (<em>'+( parseInt( d.value/f.max*100 )+'' ).slice( 0, 3 )+'%</em>)', a.data.verbose ) {
				for ( var k=0, l=a.data.verbose.length;k<l;k++ ) {
					h( g ).append( h.parseHTML( '<p class="'+a.data.verbose[k].type+'">'+a.data.verbose[k].text+'</p>' )); 
				} 
			}g.parentElement.scrollTop>i-50&&( g.parentElement.scrollTop=g.parentElement.scrollHeight ), a.data.progression<f.max?b( a.data.progression ):( j.from=f.targetversion, jQuery.post( iThoughtsTooltipGlossary.admin_ajax, {
				action: 'ithoughts_tt_gl_update_done',
				data:   {
					newversion: j.from,
				},
			}, function( a ) {
				a.success&&c( j );
			}));
		}); 
	} function c( a ) {
		h.post( iThoughtsTooltipGlossary.admin_ajax, {
			action: 'ithoughts_tt_gl_update',
			data:   {
				versions:       a,
				progression:    -1,
				maxAdvandement: -1,
			},
		}, function( a ) {
			var c=h( '#Updater' );if ( g='<div class="verboseContainer postbox closed"><div class="handlediv" title="Cliquer pour inverser."></div><h4 class="hndle ui-sortable-handle">Logs</h4><div class="inside"><pre class="verboseArea">', a.data.verbose ) {
				for ( var j=0, l=a.data.verbose.length;j<l;j++ ) {
					g+='<p class="'+a.data.verbose[j].type+'">'+a.data.verbose[j].text+'</p>'; 
				} 
			}g+='</pre></div></div>', postboxes.add_postbox_toggles( k ), a.data.Ended?( c.append( h.parseHTML( '<article data-version="ended"><h3>'+a.data.title+'</h3><p class="updatedescription">'+a.data.text+'</p></article>' )), postboxes.add_postbox_toggles( k )):( c.append( h.parseHTML( '<article data-version="'+a.data.targetversion+'"><h3>V'+a.data.targetversion+'</h3><p class="updatedescription">'+a.data.text+'</p><progress class="updateprogress" min="0" max="'+a.data.max+'" value="0"></progress><span class="updateprogresstext">0/'+a.data.max+' (<em>0%</em>)</span>'+g+'</article>' )), postboxes.add_postbox_toggles( k ), f=a.data, d=i( '[data-version="'+a.data.targetversion+'"] .updateprogress' ), e=i( '[data-version="'+a.data.targetversion+'"] .updateprogresstext' ), g=i( '[data-version="'+a.data.targetversion+'"] .verboseArea' ), b( 0 )); 
		});
	} var d, e, f, g, h=a.$, i=a.qs, j=iThoughtsTooltipGlossaryUpdater, k=j.pagenow;delete j.pagenow, c( j ); 
}( Ithoughts.v4 );/**/
